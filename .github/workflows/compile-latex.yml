name: Compile LaTeX

# main 브랜치에 push 될 때마다 동작
on:
  push:
    branches: ["main"]

# 워크플로우가 레포지토리에 푸시할 수 있도록 contents 쓰기 권한 필요
permissions:
  contents: write

jobs:
  latex:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v2
        with:
          root_file: paper.tex

      - name: Find compiled PDF and replace repo paper.pdf
        shell: bash
        run: |
          # 가능한 컴파일 출력 위치들을 찾아서 first match를 사용
          compiled=$(find . -type f -name 'paper.pdf' -not -path './.git/*' -print -quit)
          if [ -z "$compiled" ]; then
            echo "Error: compiled paper.pdf not found."
            # 로그용으로 현재 폴더의 pdf 파일 목록 출력
            echo "Listing PDF files in workspace for debugging:"
            find . -type f -name '*.pdf' -not -path './.git/*' -print || true
            exit 1
          fi
          echo "Compiled PDF found at: $compiled"
          # 워크스페이스 루트의 paper.pdf로 덮어씀
          mv -f "$compiled" ./paper.pdf
          echo "Replaced ./paper.pdf"

      - name: Commit and push updated paper.pdf (if changed)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # git 사용자 정보 설정
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 변경사항 스테이징
          git add paper.pdf

          # 변경이 있을 때만 커밋 & 푸시
          if git diff --staged --quiet; then
            echo "No changes to paper.pdf — nothing to commit."
          else
            git commit -m "ci: update compiled paper.pdf"
            git push origin HEAD:main
            echo "Updated paper.pdf pushed to main."
          fi
